{"/home/travis/build/npmtest/node-npmtest-homebridge-plugin-chromecast/test.js":"/* istanbul instrument in package npmtest_homebridge_plugin_chromecast */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-plugin-chromecast/lib.npmtest_homebridge_plugin_chromecast.js":"/* istanbul instrument in package npmtest_homebridge_plugin_chromecast */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_plugin_chromecast = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_plugin_chromecast = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-plugin-chromecast/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-plugin-chromecast && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_plugin_chromecast */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_plugin_chromecast\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_plugin_chromecast.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_plugin_chromecast.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_plugin_chromecast.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_plugin_chromecast.__dirname + '/lib.npmtest_homebridge_plugin_chromecast.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-plugin-chromecast/node_modules/homebridge-plugin-chromecast/index.js":"/* @flow weak */\n'use strict';\n\nconst http = require('http'),\n      _ = require('lodash'),\n      Chromecast = require('./chromecast.js'),\n      homekitExtensions = require('./homekit-extensions.js'),\n      Promise = require('bluebird');\n\nlet Accessory, Service, Characteristic, UUIDGen;\n\nconst NowPlaying = homekitExtensions.Characteristic.NowPlaying,\n      discoveredChromecasts = {};\n\nmodule.exports = function(homebridge) {\n  console.log('homebridge API version: ' + homebridge.version);\n\n  // Accessory must be created from PlatformAccessory Constructor\n  Accessory = homebridge.platformAccessory;\n\n  // Service and Characteristic are from hap-nodejs\n  Service = homebridge.hap.Service;\n  Characteristic = homebridge.hap.Characteristic;\n  UUIDGen = homebridge.hap.uuid;\n\n  // For platform plugin to be considered as dynamic platform plugin,\n  // registerPlatform(pluginName, platformName, constructor, dynamic), dynamic must be true\n  homebridge.registerPlatform('homebridge-plugin-chromecast', 'HomebridgePluginChromecast', HomebridgeChromecast, true);\n}\n\n// Platform constructor\n// config may be null\n// api may be null if launched from old homebridge version\nfunction HomebridgeChromecast(log, config, api) {\n  log('HomebridgeChromecast Init');\n  var platform = this;\n  this.log = log;\n  this.config = config;\n  this.accessories = [];\n\n  this.requestServer = http.createServer(function(request, response) {\n    if (request.url === '/add') {\n      this.addAccessory(new Date().toISOString());\n      response.writeHead(204);\n      response.end();\n    }\n\n    if (request.url == '/reachability') {\n      this.updateAccessoriesReachability();\n      response.writeHead(204);\n      response.end();\n    }\n\n    if (request.url == '/remove') {\n      this.removeAccessory();\n      response.writeHead(204);\n      response.end();\n    }\n  }.bind(this));\n\n  this.requestServer.listen(18081, function() {\n    platform.log('Server Listening...');\n  });\n\n  if (api) {\n      // Save the API object as plugin needs to register new accessory via this object.\n      this.api = api;\n\n      // Listen to event 'didFinishLaunching', this means homebridge already finished loading cached accessories\n      // Platform Plugin should only register new accessory that doesn't exist in homebridge after this event.\n      // Or start discover new accessories\n      this.api.on('didFinishLaunching', function() {\n        platform.log('DidFinishLaunching');\n\n        Chromecast.scan(chromecast => {\n          const chromecastConfig = chromecast.chromecastConfig;\n          console.log('Added Chromecast \"%s\" at %s:%d', chromecastConfig.name, chromecastConfig.addresses[0], chromecastConfig.port);\n\n          const uuid = UUIDGen.generate(chromecastConfig.txtRecord.id);\n\n          discoveredChromecasts[uuid] = chromecast;\n\n          if(!this.getAccessoryByID(uuid)){\n            this.addAccessory(chromecastConfig);\n          }\n\n          chromecast.on('isPlaying', isPlaying => {\n            console.log('isPlaying UPDATED: ' + isPlaying);\n            const accessory = this.getAccessoryByID(uuid);\n            accessory.getService(Service.Switch).getCharacteristic(Characteristic.On).setValue(isPlaying);\n          });\n\n          chromecast.on('isMuted', isMuted => {\n            const accessory = this.getAccessoryByID(uuid);\n            accessory.getService(Service.Switch)\n              .getCharacteristic(Characteristic.AudioFeedback)\n              .setValue(!isMuted);\n          });\n\n          chromecast.on('currentApplication', application => {\n            const accessory = this.getAccessoryByID(uuid);\n            accessory.getService(Service.Switch).getCharacteristic(NowPlaying).setValue(application\n              ? application.displayName\n              : '-');\n          });\n\n        });\n      }.bind(this));\n  }\n}\n\nHomebridgeChromecast.prototype.getAccessoryByID = function(UUID)\n{\n  console.log('finding ' + UUID)\n  return _.find(this.accessories, { UUID });\n}\n\n// Function invoked when homebridge tries to restore cached accessory\n// Developer can configure accessory at here (like setup event handler)\n// Update current value\nHomebridgeChromecast.prototype.configureAccessory = function(accessory) {\n  this.log(accessory.displayName, 'Configure Accessory');\n  var platform = this;\n\n  Object.defineProperty(accessory, 'chromecast', {\n    get: () => discoveredChromecasts[accessory.UUID]\n  });\n\n\n  // set the accessory to reachable if plugin can currently process the accessory\n  // otherwise set to false and update the reachability later by invoking\n  // accessory.updateReachability()\n  accessory.reachable = !!accessory.chromecast;\n\n  accessory.on('identify', function(paired, callback) {\n    platform.log(accessory.displayName, 'Identify!!!');\n    callback();\n  });\n\n  addCharacteristics(accessory);\n\n  this.accessories.push(accessory);\n\n  return accessory;\n}\n\n//Handler will be invoked when user try to config your plugin\n//Callback can be cached and invoke when nessary\nHomebridgeChromecast.prototype.configurationRequestHandler = function(context, request, callback) {\n  this.log('Context: ', JSON.stringify(context));\n  this.log('Request: ', JSON.stringify(request));\n\n  // Check the request response\n  if (request && request.response && request.response.inputs && request.response.inputs.name) {\n    this.addAccessory(request.response.inputs.name);\n\n    // Invoke callback with config will let homebridge save the new config into config.json\n    // Callback = function(response, type, replace, config)\n    // set 'type' to platform if the plugin is trying to modify platforms section\n    // set 'replace' to true will let homebridge replace existing config in config.json\n    // 'config' is the data platform trying to save\n    callback(null, 'platform', true, {'platform':'HomebridgePluginChromecast', 'otherConfig':'SomeData'});\n    return;\n  }\n\n  // - UI Type: Input\n  // Can be used to request input from user\n  // User response can be retrieved from request.response.inputs next time\n  // when configurationRequestHandler being invoked\n\n  var respDict = {\n    'type': 'Interface',\n    'interface': 'input',\n    'title': 'Add Accessory',\n    'items': [\n      {\n        'id': 'name',\n        'title': 'Name',\n        'placeholder': 'Fancy Light'\n      }//,\n      // {\n      //   'id': 'pw',\n      //   'title': 'Password',\n      //   'secure': true\n      // }\n    ]\n  }\n\n  // - UI Type: List\n  // Can be used to ask user to select something from the list\n  // User response can be retrieved from request.response.selections next time\n  // when configurationRequestHandler being invoked\n\n  // var respDict = {\n  //   'type': 'Interface',\n  //   'interface': 'list',\n  //   'title': 'Select Something',\n  //   'allowMultipleSelection': true,\n  //   'items': [\n  //     'A','B','C'\n  //   ]\n  // }\n\n  // - UI Type: Instruction\n  // Can be used to ask user to do something (other than text input)\n  // Hero image is base64 encoded image data. Not really sure the maximum length HomeKit allows.\n\n  // var respDict = {\n  //   'type': 'Interface',\n  //   'interface': 'instruction',\n  //   'title': 'Almost There',\n  //   'detail': 'Please press the button on the bridge to finish the setup.',\n  //   'heroImage': 'base64 image data',\n  //   'showActivityIndicator': true,\n  // 'showNextButton': true,\n  // 'buttonText': 'Login in browser',\n  // 'actionURL': 'https://google.com'\n  // }\n\n  // Plugin can set context to allow it track setup process\n  context.ts = 'Hello';\n\n  //invoke callback to update setup UI\n  callback(respDict);\n}\n\n// Sample function to show how developer can add accessory dynamically from outside event\nHomebridgeChromecast.prototype.addAccessory = function(chromecastConfig) {\n  this.log('Add Accessory');\n  const platform = this,\n        uuid = UUIDGen.generate(chromecastConfig.txtRecord.id);\n\n  var accessory = new Accessory(chromecastConfig.name, uuid);\n  accessory.on('identify', function(paired, callback) {\n    platform.log(accessory.displayName, 'Identify!!!');\n    callback();\n  });\n  // Plugin can save context on accessory\n  // To help restore accessory in configureAccessory()\n  // accessory.context.something = 'Something'\n\n  Object.defineProperty(accessory, 'chromecast', {\n    get: () => discoveredChromecasts[accessory.UUID]\n  });\n\n  addCharacteristics(accessory);\n\n  this.accessories.push(accessory);\n  this.api.registerPlatformAccessories('homebridge-plugin-chromecast', 'HomebridgePluginChromecast', [accessory]);\n\n  return accessory;\n}\n\nHomebridgeChromecast.prototype.updateAccessoriesReachability = function() {\n  this.log('Update Reachability');\n  for (var index in this.accessories) {\n    var accessory = this.accessories[index];\n    const isReachable = !!discoveredChromecasts[accessory.UUID];\n    accessory.updateReachability(isReachable);\n  }\n}\n\n// Sample function to show how developer can remove accessory dynamically from outside event\nHomebridgeChromecast.prototype.removeAccessory = function() {\n  this.log('Remove Accessory');\n  this.api.unregisterPlatformAccessories('homebridge-plugin-chromecast', 'HomebridgePluginChromecast', this.accessories);\n\n  this.accessories = [];\n}\n\nfunction handleCallback(promise, callback){\n  return promise.then(\n    value => console.log('done..') || callback(null, value),\n    err => console.log(err) || callback(err)\n  );\n}\n\nfunction addCharacteristics(accessory){\n  const switchService = accessory.getService(Service.Switch) || accessory.addService(Service.Switch, accessory.chromecast ? accessory.chromecast.name : 'Chromecast');\n\n  function wrapGetter(promisechain){\n    return (cb) => promisechain().timeout(3000).then(data => cb(null, data), cb);\n  }\n\n  switchService.getCharacteristic(Characteristic.On)\n    .on('get', wrapGetter(() => {\n      if(!accessory.chromecast){\n        return Promise.reject('Not available');\n      }\n      else{\n        return Promise.resolve(accessory.chromecast.isPlaying);\n      }\n    }))\n    .on('set', (value, cb) => {\n      ///TODO: PAUSE/STOP PÅ MULTICAST ISTÄLLET FÖR SIG SJÄLV!!!\n      //Få till Chromecast-alarm på morgonen??\n\n      const chromecast = accessory.chromecast;\n\n      if(!chromecast || !chromecast.media){\n        return cb('not working');\n      }\n\n      if(value){\n        handleCallback(chromecast.play(), cb);\n      }\n      else{\n        handleCallback(chromecast.pause(), cb);\n      }\n    });\n\n  const nowPlayingCharacteristic = switchService.getCharacteristic(NowPlaying) || switchService.addCharacteristic(NowPlaying);\n  nowPlayingCharacteristic\n    .on('get', wrapGetter(() => {\n      const chromecast = accessory.chromecast;\n      if(!chromecast){\n        return Promise.reject('not working');\n      }\n      else if(chromecast.currentApplication){\n        return Promise.resolve(chromecast.currentApplication.displayName);\n      }\n      else{\n        return Promise.resolve('-');\n      }\n    }));\n\n  const volumeCharacteristic = switchService.getCharacteristic(Characteristic.Brightness) || switchService.addCharacteristic(Characteristic.Brightness);\n  volumeCharacteristic\n    .on('get', wrapGetter(() => {\n      const chromecast = accessory.chromecast;\n      if(!chromecast || !chromecast.volume){\n        return Promise.reject('not working');\n      }\n      else{\n        return Promise.resolve(parseInt(chromecast.volume.level * 100));\n      }\n    }))\n    .on('set', (value, cb) => {\n      const chromecast = accessory.chromecast;\n      if(!chromecast){\n        return cb('Not available');\n      }\n      chromecast.setVolume(value).then(volume => cb(), cb);\n    });\n\n    const AudioFeedback = switchService.getCharacteristic(Characteristic.AudioFeedback) || switchService.addCharacteristic(Characteristic.AudioFeedback);\n    AudioFeedback\n      .on('get', wrapGetter(() => {\n        const chromecast = accessory.chromecast;\n\n        if(!chromecast || !chromecast.volume){\n          return Promise.reject('not working');\n        }\n        else{\n          return Promise.resolve(!chromecast.volume.isMuted);\n        }\n      }))\n      .on('set', (value, cb) => {\n        const chromecast = accessory.chromecast;\n\n        if(!chromecast){\n          return cb('Not available');\n        }\n\n        chromecast.setMuted(!value)\n          .then(() => cb(), cb);\n      });\n}\n","/home/travis/build/npmtest/node-npmtest-homebridge-plugin-chromecast/node_modules/homebridge-plugin-chromecast/chromecast.js":"/* @flow weak */\n'use strict';\n\nconst Client = require('castv2-client').Client,\n      DefaultMediaReceiver = require('castv2-client').DefaultMediaReceiver,\n      Promise = require('bluebird'),\n      mdns = require('mdns');\n\nconst Events = require('events');\n\nclass Chromecast extends Events\n{\n  constructor(chromecastConfig){\n    super();\n    console.log('Connecting to ' + chromecastConfig.name);\n\n    this.chromecastConfig = chromecastConfig;\n    this.isConnected = false;\n    this.applications = [];\n\n    this.connect();\n  }\n\n  isGroup(){\n    return this.chromecastConfig.txtRecord.md === 'Google Cast Group';\n  }\n\n  static scan(cb){\n    const sequence = [\n        mdns.rst.DNSServiceResolve(),\n        'DNSServiceGetAddrInfo' in mdns.dns_sd ? mdns.rst.DNSServiceGetAddrInfo() : mdns.rst.getaddrinfo({families:[0]}),\n        mdns.rst.makeAddressesUnique()\n    ];\n\n    const browser = mdns.createBrowser(mdns.tcp('googlecast'), { resolverSequence: sequence });\n\n    browser.on('serviceUp', chromecastConfig => {\n      console.log('Added Chromecast \"%s\" at %s:%d', chromecastConfig.name, chromecastConfig.addresses[0], chromecastConfig.port);\n\n      const chromecast = new Chromecast(chromecastConfig);\n\n      cb(chromecast);\n    });\n\n    browser.start();\n  }\n\n  connect(){\n    const host = this.chromecastConfig.host,\n          port = this.chromecastConfig.port;\n\n    this.client = Promise.promisifyAll(new Client());\n\n    return this.client\n      .connectAsync({\n        host: host,\n        port: port\n      })\n      .then(() => {\n        this.client.on('status', status => this.onClientStatus(status));\n        this.client.on('error', this.onClientError);\n        this.client.connection.on('disconnect', this.onConnectionDisconnect);\n        this.client.heartbeat.on('timeout', this.onHeartbeatTimeout);\n        this.client.heartbeat.on('pong', this.onHeartbeatPong);\n        this.client.receiver.on('status', this.onReceiverStatus);\n        return this.client.getStatusAsync();\n      })\n      .then(status => this.onClientStatus(status));\n  }\n\n  get isPlaying() {\n    return this.media && this.media.status && (this.media.status.playerState === 'PLAYING' || this.media.status.playerState === 'BUFFERING') ? true : false;\n  }\n\n  get isMuted() {\n    return this.volume && this.volume.muted ? true : false;\n  }\n\n  disconnect(){\n    this.isConnected = false;\n    if(this.client && this.client.closeAsync){\n      this.client.closeAsync();\n    }\n  }\n\n  onClientStatus(status){\n    console.log('CLIENT GOT STATUS: \\n' + JSON.stringify(status));\n\n    const oldApplication = this.currentApplication,\n          oldVolume = this.volume;\n\n    this.volume = status.volume;\n    this.applications = status.applications;\n    this.currentApplication = this.applications && this.applications.length > 0\n      ? this.applications[0]\n      : null;\n\n    if(!oldVolume || !this.volume || oldVolume.muted !== this.volume.muted){\n      this.emit('isMuted', this.volume.muted);\n    }\n\n    if(!oldApplication || !this.currentApplication || oldApplication.statusId !== this.currentApplication.statusId){\n      this.emit('currentApplication', this.currentApplication);\n    }\n\n    if(this.currentApplication){\n      if(!this.media || !oldApplication || this.currentApplication.statusId !== oldApplication.statusId){\n        return this.client\n          .joinAsync(this.currentApplication, DefaultMediaReceiver)\n          .then(Promise.promisifyAll)\n          .then(media => this.media = media)\n          .then(media => {\n            this.media.on('status', status => this.onMediaStatus(status));\n            return this.media.getStatusAsync();\n          })\n          .then(status => this.onMediaStatus(status));\n      }\n    }\n    else{\n      this.media = null;\n    }\n    if(oldVolume !== this.volume){\n      this.emit('volume', this.volume);\n    }\n    return Promise.resolve();\n  }\n\n  pause(){\n    return this.media\n      ? this.media.pauseAsync()\n      : Promise.resolve();\n  }\n\n  play(){\n    return this.media\n      ? this.media.playAsync()\n      : Promise.resolve();\n  }\n\n  stop(){\n    return this.media\n      ? this.media.stopAsync()\n      : Promise.resolve();\n  }\n\n  load(media, options){\n    return this.media\n      ? this.media.loadAsync(media, options)\n      : Promise.resolve();\n  }\n\n  seek(time){\n    return this.media\n      ? this.media.seekAsync(time)\n      : Promise.resolve();\n  }\n\n  onClientError(error){\n    console.log('CLIENT GOT ERROR: \\n' + JSON.stringify(error));\n  }\n  /*\n  self.connection = self.createController(ConnectionController);\n    self.heartbeat  = self.createController(HeartbeatController);\n    self.receiver   = self.createController(ReceiverController);*/\n  onConnectionDisconnect(){\n    console.log('CONNECTION GOT DISCONNECT');\n    this.isConnected = false;\n  }\n\n  onHeartbeatTimeout(){\n    console.log('GOT HEARTBEAT TIMEOUT');\n  }\n\n  onHeartbeatPong(){\n    console.log('GOT HEARTBEAT PONG');\n  }\n\n  onReceiverStatus(status){\n    console.log('RECEIVER STATUS:\\n' + JSON.stringify(status));\n    //SAME AS CLIENT STATUS?\n  }\n\n  setVolume(volume){\n    const decimalVolume = volume / 100;\n    return this.client.setVolumeAsync({ level: decimalVolume })\n      .then(() => {\n        if(this.volume){\n          this.volume.level = decimalVolume;\n        }\n      })\n      .then(() => decimalVolume);\n  }\n\n  setMuted(isMuted){\n    return this.client.setVolumeAsync({ muted: isMuted })\n      .then(() => {\n        if(this.volume){\n          this.volume.muted = isMuted;\n        }\n      })\n      .then(() => isMuted);\n  }\n\n  onMediaStatus(status){\n    const previousIsPlaying = this.isPlaying;\n    console.log('MEDIA STATUS:\\n' + JSON.stringify(status));\n    if(this.media){\n      this.media.status = status;\n    }\n    if(previousIsPlaying !== this.isPlaying){\n      this.emit('isPlaying', this.isPlaying);\n    }\n  }\n}\n\nmodule.exports = Chromecast;\n","/home/travis/build/npmtest/node-npmtest-homebridge-plugin-chromecast/node_modules/homebridge-plugin-chromecast/homekit-extensions.js":"/* @flow weak */\n'use strict';\n\nconst Characteristic = require('hap-nodejs').Characteristic;\n\nconst UUID = '00000008-0000-1000-8000-0026BB765296';\nconst Volume = function() {\n  const char = new Characteristic('Volume', UUID);\n  char.setProps({\n    format: Characteristic.Formats.INT,\n    unit: Characteristic.Units.PERCENTAGE,\n    maxValue: 100,\n    minValue: 0,\n    minStep: 1,\n    perms: [Characteristic.Perms.READ, Characteristic.Perms.WRITE, Characteristic.Perms.NOTIFY]\n  });\n  char.value = char.getDefaultValue();\n  return char;\n};\nVolume.UUID = UUID;\n\nconst NowPlayingUUID = '00000008-0000-1000-8000-0026BB765297';\nconst NowPlaying = function() {\n  const char = new Characteristic('Now Playing', NowPlayingUUID);\n\n  char.setProps({\n    format: Characteristic.Formats.STRING,\n    perms: [Characteristic.Perms.READ]\n  });\n  char.value = char.getDefaultValue();\n  return char;\n};\nNowPlaying.UUID = NowPlayingUUID;\n\nconst PlayingUUID = '00000008-0000-1000-8000-0026BB765298';\nconst Playing = function() {\n  const char = new Characteristic('Playing', PlayingUUID);\n  char.setProps({\n    format: Characteristic.Formats.BOOL,\n    perms: [Characteristic.Perms.READ, Characteristic.Perms.WRITE, Characteristic.Perms.NOTIFY]\n  });\n  char.value = char.getDefaultValue();\n  return char;\n};\nPlaying.UUID = PlayingUUID;\n\nconst MediaControllerUUID = '00000008-0000-1000-8000-0026BB765299';\nconst MediaController = function(displayName, subtype) {\n  const char = new Service(displayName, MediaControllerUUID, subtype);\n\n  char.addCharacteristic(NowPlaying);\n  char.addCharacteristic(Playing);\n\n  return char;\n};\nMediaController.UUID = MediaControllerUUID;\n\nmodule.exports = {\n  Characteristic: {\n    Volume: Volume,\n    NowPlaying: NowPlaying,\n    Playing: Playing\n  },\n  Service: {\n    MediaController: MediaController\n  }\n}\n"}